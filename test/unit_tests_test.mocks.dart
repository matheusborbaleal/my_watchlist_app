// Mocks generated by Mockito 5.4.6 from annotations
// in my_watchlist_app/test/unit_tests_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i7;

import 'package:geolocator_platform_interface/src/enums/enums.dart' as _i9;
import 'package:geolocator_platform_interface/src/geolocator_platform_interface.dart'
    as _i8;
import 'package:geolocator_platform_interface/src/models/models.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePosition_2 extends _i1.SmartFake implements _i3.Position {
  _FakePosition_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
          )
          as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i4.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GeolocatorPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorPlatform extends _i1.Mock
    implements _i8.GeolocatorPlatform {
  MockGeolocatorPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i9.LocationPermission> checkPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermission, []),
            returnValue: _i4.Future<_i9.LocationPermission>.value(
              _i9.LocationPermission.denied,
            ),
          )
          as _i4.Future<_i9.LocationPermission>);

  @override
  _i4.Future<_i9.LocationPermission> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i4.Future<_i9.LocationPermission>.value(
              _i9.LocationPermission.denied,
            ),
          )
          as _i4.Future<_i9.LocationPermission>);

  @override
  _i4.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i3.Position?> getLastKnownPosition({
    bool? forceLocationManager = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLastKnownPosition, [], {
              #forceLocationManager: forceLocationManager,
            }),
            returnValue: _i4.Future<_i3.Position?>.value(),
          )
          as _i4.Future<_i3.Position?>);

  @override
  _i4.Future<_i3.Position> getCurrentPosition({
    _i3.LocationSettings? locationSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, [], {
              #locationSettings: locationSettings,
            }),
            returnValue: _i4.Future<_i3.Position>.value(
              _FakePosition_2(
                this,
                Invocation.method(#getCurrentPosition, [], {
                  #locationSettings: locationSettings,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.Position>);

  @override
  _i4.Stream<_i9.ServiceStatus> getServiceStatusStream() =>
      (super.noSuchMethod(
            Invocation.method(#getServiceStatusStream, []),
            returnValue: _i4.Stream<_i9.ServiceStatus>.empty(),
          )
          as _i4.Stream<_i9.ServiceStatus>);

  @override
  _i4.Stream<_i3.Position> getPositionStream({
    _i3.LocationSettings? locationSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPositionStream, [], {
              #locationSettings: locationSettings,
            }),
            returnValue: _i4.Stream<_i3.Position>.empty(),
          )
          as _i4.Stream<_i3.Position>);

  @override
  _i4.Future<_i9.LocationAccuracyStatus> requestTemporaryFullAccuracy({
    required String? purposeKey,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#requestTemporaryFullAccuracy, [], {
              #purposeKey: purposeKey,
            }),
            returnValue: _i4.Future<_i9.LocationAccuracyStatus>.value(
              _i9.LocationAccuracyStatus.reduced,
            ),
          )
          as _i4.Future<_i9.LocationAccuracyStatus>);

  @override
  _i4.Future<_i9.LocationAccuracyStatus> getLocationAccuracy() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationAccuracy, []),
            returnValue: _i4.Future<_i9.LocationAccuracyStatus>.value(
              _i9.LocationAccuracyStatus.reduced,
            ),
          )
          as _i4.Future<_i9.LocationAccuracyStatus>);

  @override
  _i4.Future<bool> openAppSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openAppSettings, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> openLocationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openLocationSettings, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distanceBetween, [
              startLatitude,
              startLongitude,
              endLatitude,
              endLongitude,
            ]),
            returnValue: 0.0,
          )
          as double);

  @override
  double bearingBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#bearingBetween, [
              startLatitude,
              startLongitude,
              endLatitude,
              endLongitude,
            ]),
            returnValue: 0.0,
          )
          as double);
}
